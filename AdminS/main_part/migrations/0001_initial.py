# Generated by Django 2.2.19 on 2023-01-07 12:51

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='MainData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1800), django.core.validators.MaxValueValidator(3000)], verbose_name='Год')),
                ('cemetery_name', models.CharField(blank=True, max_length=512, null=True, verbose_name='Наименование кладбища')),
                ('number', models.IntegerField(blank=True, null=True, verbose_name='Номер')),
                ('surname', models.CharField(blank=True, max_length=40, null=True, verbose_name='Фамилия')),
                ('name', models.CharField(blank=True, max_length=40, null=True, verbose_name='Имя')),
                ('middle_name', models.CharField(blank=True, max_length=40, null=True, verbose_name='Отчество')),
                ('age_deceased', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(150)], verbose_name='Возраст умершего')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('date_of_death', models.DateField(blank=True, null=True, verbose_name='Дата смерти')),
                ('burial_date', models.DateField(blank=True, null=True, verbose_name='Дата захоронения')),
                ('area', models.CharField(blank=True, max_length=50, null=True, verbose_name='Участок')),
                ('grave', models.CharField(blank=True, max_length=50, null=True, verbose_name='Могила')),
                ('evidence', models.CharField(blank=True, max_length=50, null=True, verbose_name='№ свидетельства о смерти из ЗАГСа')),
                ('registry_office', models.CharField(blank=True, max_length=10, null=True, verbose_name='Каким ЗАГСом выдано свидетельство')),
                ('responsible_for_burial', models.TextField(blank=True, null=True, verbose_name='Ф.И.О. ответственного за захоронение и его адрес')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Примечание')),
                ('user_create', models.CharField(max_length=50, verbose_name='Создатель записи')),
                ('data_create', models.DateField(auto_now_add=True, verbose_name='Дата создания записи')),
                ('del_status', models.BooleanField(default=False)),
                ('del_user', models.CharField(blank=True, max_length=50)),
                ('del_data', models.DateField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('Оператор', 'Оператор'), ('Сотрудник офиса', 'Сотрудник офиса'), ('Руководитель', 'Руководитель'), ('Администратор', 'Администратор')], max_length=30, verbose_name='Права доступа')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
